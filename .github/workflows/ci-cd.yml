name: HFT Trading System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  code-quality:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        
    - name: Setup C++ environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake clang-format clang-tidy
        
    - name: Run linting
      run: make lint
      
    - name: Run security scans
      run: make security

  build-cpp:
    runs-on: ubuntu-22.04
    needs: code-quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        sudo apt-get install -y libboost-all-dev libtbb-dev
        
    - name: Build C++ components
      run: make build-cpp
      
    - name: Run C++ tests
      run: make test-cpp
      
    - name: Run benchmarks
      run: make benchmark
      
    - name: Upload C++ artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cpp-binaries
        path: src/cpp/build/trading_engine

  build-python:
    runs-on: ubuntu-22.04
    needs: code-quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Build Python components
      run: make build-python
      
    - name: Run Python tests
      run: make test-python
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: src/python/htmlcov/coverage.xml
        
    - name: Upload Python artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-packages
        path: src/python/dist/

  integration-tests:
    runs-on: ubuntu-22.04
    needs: [build-cpp, build-python]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      
    - name: Setup test environment
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
        
    - name: Run integration tests
      run: |
        # Run integration test suite
        echo "Running integration tests..."
        
    - name: Performance validation
      run: |
        # Validate performance meets requirements
        echo "Validating performance..."

  build-docker:
    runs-on: ubuntu-22.04
    needs: [build-cpp, build-python]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-22.04
    needs: [integration-tests, build-docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment logic
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test logic
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#hft-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    runs-on: ubuntu-22.04
    needs: [integration-tests, build-docker]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment logic
        
    - name: Health check
      run: |
        echo "Performing health checks..."
        # Add health check logic
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#hft-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  security-scan:
    runs-on: ubuntu-22.04
    needs: build-docker
    permissions:
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  performance-monitoring:
    runs-on: ubuntu-22.04
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run performance benchmarks
      run: |
        echo "Running performance benchmarks..."
        # Add benchmark logic
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark_results.json
        
    - name: Performance regression check
      run: |
        echo "Checking for performance regressions..."
        # Add regression check logic
